q()
getwd()
setwd("D:/R_project/FFT_test")
library(dplyr)
Noise_DB <- function(file_name){
# A weighting 함수
A_weighting <- function(max_f, df) {
f <- seq(from=0, to=max_f-1, by=df)
Ra_f <- 12194^2*f^4/((f^2+20.6^2)*(f^2+12194^2)*sqrt((f^2+107.7^2)*(f^2+737.9^2)))
Ra_f1000 <- 12194^2*1000^4/((1000^2+20.6^2)*(1000^2+12194^2)*sqrt((1000^2+107.7^2)*(1000^2+737.9^2)))
A_fdB <- 20*log10(Ra_f)-20*log10(Ra_f1000)
s_f <- Ra_f^2/Ra_f1000^2
return(s_f)
}
library(readxl)
T <- read_excel(file_name)
samp_freq <- as.numeric(T[2,1]-T[1,1])
# 음압 데이터 추출
pres <- T[,2]; rm(T)
#df <- readline("set the delta frequency?")
df <- 1 # 주파수 간격은 1Hz
t_sel <- df/samp_freq #fft 한번에 필요한 갯수
max_f <- t_sel/2
d_f <- seq(from=0, to=(t_sel/2)-1, by=df)
hann_win = matrix(,t_sel,1)
for (i in 1:t_sel[1]) {
hann_win[i,1] <- 0.5-0.5*cos(2*pi*(i-1)/t_sel)
}
A_weight_func <- A_weighting(max_f, df)
avg_num <- 30
# overlab 67%
overlab <- 0.67
overlab_num <- round(overlab*t_sel,0)
# for 문 돌려서 각 샘플 빼기
#--------------------------------------
sta = 1
fin = t_sel
t_raw <- data.frame()
FT <- data.frame()
FT_A <- data.frame()
#t_raw[1:51200,1] <- pres[sta:fin,1]*hann_win
for (i in 1:30) {
t_raw[1:51200,i] <- pres[sta:fin,1]*hann_win
FT[1:51200,i] <- 2*abs(fft(t_raw[1:51200,i]))/(sqrt(2)*t_sel[1])
FT_A[1:25600,i] <- FT[1:25600,i]*A_weight_func
LFT <- 10*log10(FT_A^2/0.00002^2)
sta <- fin-overlab_num+1
fin <- sta+t_sel-1
}
d = data.frame(d_f)
gFT_A <- tidyr::gather(data=LFT, V1:V30, key="Comp.Hz", value="dBA")
library(magrittr)
gFT_A %<>%
mutate(Freq=rep(1:25600, times=30))
library(writexl)
write_xlsx(gFT_A,"./output/Noise_DB.xlsx",col_names=TRUE)
}
MV_DB <- function(file_name) {
library(data.table)
mv <- fread(file_name,encoding="UTF-8", header=TRUE, skip=6, stringsAsFactor=FALSE)
# 중복이름 변경
# ---------------------
names(mv)[38] <- "INV_I"
names(mv)[39] <- "INV"
names(mv)[40] <- "INV2_I"
names(mv)[41] <- "INV2_W"
# NA가 있는 열 삭제
xx <- which(is.na(mv[1,]))
# 필요없는 데이터 삭제 (추가 협의)
mv1 <- select(mv, -xx)
#mv2 <- select(mv1, -c("siter","time","운전모드","목표과열","목표과냉과열","ACCUM.","4WAY","HEX V/V","목표고압", "목표저압", "소음레벨", "오일제어2", "Dry Contact", "오일제어1", "INV1 예열", "INV2 예열", "열교환기상부", "열교환기하부","균유 V/V","리시버 IN","리시버 OUT","흡입 V/V","오일센서","오일센서2","적설","FAN 목표","FAN2 목표"))
mv_re <- select(mv1, c("INV", "FAN 현재", "FAN2 현재", "Main EEV", "공기온도", "흡입온도", "INV 토출온도", "열교환기온도"))
r_ch <- seq(500, 1000, length=30)
mv_sel <- slice(mv_re, r_ch)
mv_sel$INV <- c("V1","V2","V3","V4","V5","V6","V7","V8","V9","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30")
library(writexl)
write_xlsx(mv_sel,"./output/MV_DB.xlsx",col_names=TRUE)
}
Noise_DB("./data/time_29Hz.xlsx")
library(dplyr)
Noise_DB <- function(file_name){
# A weighting 함수
A_weighting <- function(max_f, df) {
f <- seq(from=0, to=max_f-1, by=df)
Ra_f <- 12194^2*f^4/((f^2+20.6^2)*(f^2+12194^2)*sqrt((f^2+107.7^2)*(f^2+737.9^2)))
Ra_f1000 <- 12194^2*1000^4/((1000^2+20.6^2)*(1000^2+12194^2)*sqrt((1000^2+107.7^2)*(1000^2+737.9^2)))
A_fdB <- 20*log10(Ra_f)-20*log10(Ra_f1000)
s_f <- Ra_f^2/Ra_f1000^2
return(s_f)
}
library(readxl)
T <- read_excel(file_name)
samp_freq <- as.numeric(T[2,1]-T[1,1])
# 음압 데이터 추출
pres <- T[,2]; rm(T)
#df <- readline("set the delta frequency?")
df <- 1 # 주파수 간격은 1Hz
t_sel <- df/samp_freq #fft 한번에 필요한 갯수
max_f <- t_sel/2
d_f <- seq(from=0, to=(t_sel/2)-1, by=df)
hann_win = matrix(,t_sel,1)
for (i in 1:t_sel[1]) {
hann_win[i,1] <- 0.5-0.5*cos(2*pi*(i-1)/t_sel)
}
A_weight_func <- A_weighting(max_f, df)
avg_num <- 30
# overlab 67%
overlab <- 0.67
overlab_num <- round(overlab*t_sel,0)
# for 문 돌려서 각 샘플 빼기
#--------------------------------------
sta = 1
fin = t_sel
t_raw <- data.frame()
FT <- data.frame()
FT_A <- data.frame()
#t_raw[1:51200,1] <- pres[sta:fin,1]*hann_win
for (i in 1:30) {
t_raw[1:51200,i] <- pres[sta:fin,1]*hann_win
FT[1:51200,i] <- 2*abs(fft(t_raw[1:51200,i]))/(sqrt(2)*t_sel[1])
FT_A[1:25600,i] <- FT[1:25600,i]*A_weight_func
LFT <- 10*log10(FT_A^2/0.00002^2)
sta <- fin-overlab_num+1
fin <- sta+t_sel-1
}
d = data.frame(d_f)
gFT_A <- tidyr::gather(data=LFT, V1:V30, key="Comp.Hz", value="dBA")
library(magrittr)
gFT_A %<>%
mutate(Freq=rep(1:25600, times=30))
library(writexl)
write_xlsx(gFT_A,"./output/Noise_DB.xlsx",col_names=TRUE)
}
MV_DB <- function(file_name) {
library(data.table)
mv <- fread(file_name,encoding="UTF-8", header=TRUE, skip=6, stringsAsFactor=FALSE)
# 중복이름 변경
# ---------------------
names(mv)[38] <- "INV_I"
names(mv)[39] <- "INV"
names(mv)[40] <- "INV2_I"
names(mv)[41] <- "INV2_W"
# NA가 있는 열 삭제
xx <- which(is.na(mv[1,]))
# 필요없는 데이터 삭제 (추가 협의)
mv1 <- select(mv, -xx)
#mv2 <- select(mv1, -c("siter","time","운전모드","목표과열","목표과냉과열","ACCUM.","4WAY","HEX V/V","목표고압", "목표저압", "소음레벨", "오일제어2", "Dry Contact", "오일제어1", "INV1 예열", "INV2 예열", "열교환기상부", "열교환기하부","균유 V/V","리시버 IN","리시버 OUT","흡입 V/V","오일센서","오일센서2","적설","FAN 목표","FAN2 목표"))
mv_re <- select(mv1, c("INV", "FAN 현재", "FAN2 현재", "Main EEV", "공기온도", "흡입온도", "INV 토출온도", "열교환기온도"))
r_ch <- seq(500, 1000, length=30)
mv_sel <- slice(mv_re, r_ch)
mv_sel$INV <- c("V1","V2","V3","V4","V5","V6","V7","V8","V9","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30")
library(writexl)
write_xlsx(mv_sel,"./output/MV_DB.xlsx",col_names=TRUE)
}
Noise_DB("./data/time_29Hz.xlsx")
install.packages("didyr")
install.packages("tidyr")
library(dplyr)
Noise_DB <- function(file_name){
# A weighting 함수
A_weighting <- function(max_f, df) {
f <- seq(from=0, to=max_f-1, by=df)
Ra_f <- 12194^2*f^4/((f^2+20.6^2)*(f^2+12194^2)*sqrt((f^2+107.7^2)*(f^2+737.9^2)))
Ra_f1000 <- 12194^2*1000^4/((1000^2+20.6^2)*(1000^2+12194^2)*sqrt((1000^2+107.7^2)*(1000^2+737.9^2)))
A_fdB <- 20*log10(Ra_f)-20*log10(Ra_f1000)
s_f <- Ra_f^2/Ra_f1000^2
return(s_f)
}
library(readxl)
T <- read_excel(file_name)
samp_freq <- as.numeric(T[2,1]-T[1,1])
# 음압 데이터 추출
pres <- T[,2]; rm(T)
#df <- readline("set the delta frequency?")
df <- 1 # 주파수 간격은 1Hz
t_sel <- df/samp_freq #fft 한번에 필요한 갯수
max_f <- t_sel/2
d_f <- seq(from=0, to=(t_sel/2)-1, by=df)
hann_win = matrix(,t_sel,1)
for (i in 1:t_sel[1]) {
hann_win[i,1] <- 0.5-0.5*cos(2*pi*(i-1)/t_sel)
}
A_weight_func <- A_weighting(max_f, df)
avg_num <- 30
# overlab 67%
overlab <- 0.67
overlab_num <- round(overlab*t_sel,0)
# for 문 돌려서 각 샘플 빼기
#--------------------------------------
sta = 1
fin = t_sel
t_raw <- data.frame()
FT <- data.frame()
FT_A <- data.frame()
#t_raw[1:51200,1] <- pres[sta:fin,1]*hann_win
for (i in 1:30) {
t_raw[1:51200,i] <- pres[sta:fin,1]*hann_win
FT[1:51200,i] <- 2*abs(fft(t_raw[1:51200,i]))/(sqrt(2)*t_sel[1])
FT_A[1:25600,i] <- FT[1:25600,i]*A_weight_func
LFT <- 10*log10(FT_A^2/0.00002^2)
sta <- fin-overlab_num+1
fin <- sta+t_sel-1
}
d = data.frame(d_f)
gFT_A <- tidyr::gather(data=LFT, V1:V30, key="Comp.Hz", value="dBA")
library(magrittr)
gFT_A %<>%
mutate(Freq=rep(1:25600, times=30))
library(writexl)
write_xlsx(gFT_A,"./output/Noise_DB.xlsx",col_names=TRUE)
}
MV_DB <- function(file_name) {
library(data.table)
mv <- fread(file_name,encoding="UTF-8", header=TRUE, skip=6, stringsAsFactor=FALSE)
# 중복이름 변경
# ---------------------
names(mv)[38] <- "INV_I"
names(mv)[39] <- "INV"
names(mv)[40] <- "INV2_I"
names(mv)[41] <- "INV2_W"
# NA가 있는 열 삭제
xx <- which(is.na(mv[1,]))
# 필요없는 데이터 삭제 (추가 협의)
mv1 <- select(mv, -xx)
#mv2 <- select(mv1, -c("siter","time","운전모드","목표과열","목표과냉과열","ACCUM.","4WAY","HEX V/V","목표고압", "목표저압", "소음레벨", "오일제어2", "Dry Contact", "오일제어1", "INV1 예열", "INV2 예열", "열교환기상부", "열교환기하부","균유 V/V","리시버 IN","리시버 OUT","흡입 V/V","오일센서","오일센서2","적설","FAN 목표","FAN2 목표"))
mv_re <- select(mv1, c("INV", "FAN 현재", "FAN2 현재", "Main EEV", "공기온도", "흡입온도", "INV 토출온도", "열교환기온도"))
r_ch <- seq(500, 1000, length=30)
mv_sel <- slice(mv_re, r_ch)
mv_sel$INV <- c("V1","V2","V3","V4","V5","V6","V7","V8","V9","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30")
library(writexl)
write_xlsx(mv_sel,"./output/MV_DB.xlsx",col_names=TRUE)
}
Noise_DB("./data/time_29Hz.xlsx")
MV_DB("./data/time tracking_ODU1.csv")
install.packages("writexl")
library(dplyr)
Noise_DB <- function(file_name){
# A weighting 함수
A_weighting <- function(max_f, df) {
f <- seq(from=0, to=max_f-1, by=df)
Ra_f <- 12194^2*f^4/((f^2+20.6^2)*(f^2+12194^2)*sqrt((f^2+107.7^2)*(f^2+737.9^2)))
Ra_f1000 <- 12194^2*1000^4/((1000^2+20.6^2)*(1000^2+12194^2)*sqrt((1000^2+107.7^2)*(1000^2+737.9^2)))
A_fdB <- 20*log10(Ra_f)-20*log10(Ra_f1000)
s_f <- Ra_f^2/Ra_f1000^2
return(s_f)
}
library(readxl)
T <- read_excel(file_name)
samp_freq <- as.numeric(T[2,1]-T[1,1])
# 음압 데이터 추출
pres <- T[,2]; rm(T)
#df <- readline("set the delta frequency?")
df <- 1 # 주파수 간격은 1Hz
t_sel <- df/samp_freq #fft 한번에 필요한 갯수
max_f <- t_sel/2
d_f <- seq(from=0, to=(t_sel/2)-1, by=df)
hann_win = matrix(,t_sel,1)
for (i in 1:t_sel[1]) {
hann_win[i,1] <- 0.5-0.5*cos(2*pi*(i-1)/t_sel)
}
A_weight_func <- A_weighting(max_f, df)
avg_num <- 30
# overlab 67%
overlab <- 0.67
overlab_num <- round(overlab*t_sel,0)
# for 문 돌려서 각 샘플 빼기
#--------------------------------------
sta = 1
fin = t_sel
t_raw <- data.frame()
FT <- data.frame()
FT_A <- data.frame()
#t_raw[1:51200,1] <- pres[sta:fin,1]*hann_win
for (i in 1:30) {
t_raw[1:51200,i] <- pres[sta:fin,1]*hann_win
FT[1:51200,i] <- 2*abs(fft(t_raw[1:51200,i]))/(sqrt(2)*t_sel[1])
FT_A[1:25600,i] <- FT[1:25600,i]*A_weight_func
LFT <- 10*log10(FT_A^2/0.00002^2)
sta <- fin-overlab_num+1
fin <- sta+t_sel-1
}
d = data.frame(d_f)
gFT_A <- tidyr::gather(data=LFT, V1:V30, key="Comp.Hz", value="dBA")
library(magrittr)
gFT_A %<>%
mutate(Freq=rep(1:25600, times=30))
library(writexl)
write_xlsx(gFT_A,"./output/Noise_DB.xlsx",col_names=TRUE)
}
MV_DB <- function(file_name) {
library(data.table)
mv <- fread(file_name,encoding="UTF-8", header=TRUE, skip=6, stringsAsFactor=FALSE)
# 중복이름 변경
# ---------------------
names(mv)[38] <- "INV_I"
names(mv)[39] <- "INV"
names(mv)[40] <- "INV2_I"
names(mv)[41] <- "INV2_W"
# NA가 있는 열 삭제
xx <- which(is.na(mv[1,]))
# 필요없는 데이터 삭제 (추가 협의)
mv1 <- select(mv, -xx)
#mv2 <- select(mv1, -c("siter","time","운전모드","목표과열","목표과냉과열","ACCUM.","4WAY","HEX V/V","목표고압", "목표저압", "소음레벨", "오일제어2", "Dry Contact", "오일제어1", "INV1 예열", "INV2 예열", "열교환기상부", "열교환기하부","균유 V/V","리시버 IN","리시버 OUT","흡입 V/V","오일센서","오일센서2","적설","FAN 목표","FAN2 목표"))
mv_re <- select(mv1, c("INV", "FAN 현재", "FAN2 현재", "Main EEV", "공기온도", "흡입온도", "INV 토출온도", "열교환기온도"))
r_ch <- seq(500, 1000, length=30)
mv_sel <- slice(mv_re, r_ch)
mv_sel$INV <- c("V1","V2","V3","V4","V5","V6","V7","V8","V9","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30")
library(writexl)
write_xlsx(mv_sel,"./output/MV_DB.xlsx",col_names=TRUE)
}
Noise_DB("./data/time_29Hz.xlsx")
MV_DB("./data/time tracking_ODU1.csv")
#데이터 호출하기---------------------------------------
N_spectrums <- readxl::read_excel("./output/Noise_DB.xlsx")
MV_sel <- readxl::read_excel("./output/MV_DB.xlsx")
g <- N_spectrums %>% ggplot(aes(x=Freq, y=dBA, group=Comp.Hz))
library(ggplot2)
g <- N_spectrums %>% ggplot(aes(x=Freq, y=dBA, group=Comp.Hz))
g + geom_line(aes(group=Comp.Hz, color=Comp.Hz))
View(Noise_DB)
View(MV_DB)
library(dplyr)
Noise_DB <- function(file_name){
# A weighting 함수
A_weighting <- function(max_f, df) {
f <- seq(from=0, to=max_f-1, by=df)
Ra_f <- 12194^2*f^4/((f^2+20.6^2)*(f^2+12194^2)*sqrt((f^2+107.7^2)*(f^2+737.9^2)))
Ra_f1000 <- 12194^2*1000^4/((1000^2+20.6^2)*(1000^2+12194^2)*sqrt((1000^2+107.7^2)*(1000^2+737.9^2)))
A_fdB <- 20*log10(Ra_f)-20*log10(Ra_f1000)
s_f <- Ra_f^2/Ra_f1000^2
return(s_f)
}
library(readxl)
T <- read_excel(file_name)
samp_freq <- as.numeric(T[2,1]-T[1,1])
# 음압 데이터 추출
pres <- T[,2]; rm(T)
#df <- readline("set the delta frequency?")
df <- 1 # 주파수 간격은 1Hz
t_sel <- df/samp_freq #fft 한번에 필요한 갯수
max_f <- t_sel/2
d_f <- seq(from=0, to=(t_sel/2)-1, by=df)
hann_win = matrix(,t_sel,1)
for (i in 1:t_sel[1]) {
hann_win[i,1] <- 0.5-0.5*cos(2*pi*(i-1)/t_sel)
}
A_weight_func <- A_weighting(max_f, df)
avg_num <- 30
# overlab 67%
overlab <- 0.67
overlab_num <- round(overlab*t_sel,0)
# for 문 돌려서 각 샘플 빼기
#--------------------------------------
sta = 1
fin = t_sel
t_raw <- data.frame()
FT <- data.frame()
FT_A <- data.frame()
#t_raw[1:51200,1] <- pres[sta:fin,1]*hann_win
for (i in 1:30) {
t_raw[1:51200,i] <- pres[sta:fin,1]*hann_win
FT[1:51200,i] <- 2*abs(fft(t_raw[1:51200,i]))/(sqrt(2)*t_sel[1])
FT_A[1:25600,i] <- FT[1:25600,i]*A_weight_func
LFT <- 10*log10(FT_A^2/0.00002^2)
sta <- fin-overlab_num+1
fin <- sta+t_sel-1
}
d = data.frame(d_f)
gFT_A <- tidyr::gather(data=LFT, V1:V30, key="Comp", value="dBA")
library(magrittr)
gFT_A %<>%
mutate(Freq=rep(1:25600, times=30))
library(writexl)
write_xlsx(gFT_A,"./output/Noise_DB.xlsx",col_names=TRUE)
}
MV_DB <- function(file_name) {
library(data.table)
mv <- fread(file_name,encoding="UTF-8", header=TRUE, skip=6, stringsAsFactor=FALSE)
# 중복이름 변경
# ---------------------
names(mv)[38] <- "INV_I"
names(mv)[39] <- "INV"
names(mv)[40] <- "INV2_I"
names(mv)[41] <- "INV2_W"
# NA가 있는 열 삭제
xx <- which(is.na(mv[1,]))
# 필요없는 데이터 삭제 (추가 협의)
mv1 <- select(mv, -xx)
#mv2 <- select(mv1, -c("siter","time","운전모드","목표과열","목표과냉과열","ACCUM.","4WAY","HEX V/V","목표고압", "목표저압", "소음레벨", "오일제어2", "Dry Contact", "오일제어1", "INV1 예열", "INV2 예열", "열교환기상부", "열교환기하부","균유 V/V","리시버 IN","리시버 OUT","흡입 V/V","오일센서","오일센서2","적설","FAN 목표","FAN2 목표"))
mv_re <- select(mv1, c("INV", "FAN 현재", "FAN2 현재", "Main EEV", "공기온도", "흡입온도", "INV 토출온도", "열교환기온도"))
r_ch <- seq(500, 1000, length=30)
mv_sel <- slice(mv_re, r_ch)
mv_sel$INV <- c("V1","V2","V3","V4","V5","V6","V7","V8","V9","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30")
library(writexl)
write_xlsx(mv_sel,"./output/MV_DB.xlsx",col_names=TRUE)
}
Noise_DB("./data/time_29Hz.xlsx")
MV_DB("./data/time tracking_ODU1.csv")
#데이터 호출하기---------------------------------------
N_spectrums <- readxl::read_excel("./output/Noise_DB.xlsx")
MV_sel <- readxl::read_excel("./output/MV_DB.xlsx")
g <- N_spectrums %>% ggplot(aes(x=Freq, y=dBA, group=Comp))
g <- N_spectrums %>% ggplot(aes(x=Freq, y=dBA, group=Comp))
g + geom_line(aes(group=Comp, color=Comp))
N_spectrums$dBA %>% as.numeric()
N_spectrums$dBA %>% as.numeric()
N_spectrums$dBA <- as.numeric(N_spectrums$dBA)
g <- N_spectrums %>% ggplot(aes(x=Freq, y=dBA, group=Comp))
g + geom_line(aes(group=Comp, color=Comp))
source('D:/R_project/FFT_test/fft_test.R', encoding = 'UTF-8')
